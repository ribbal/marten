// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.AsyncDaemon.Testing;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: DayProjectionLiveAggregation926062072
    public class DayProjectionLiveAggregation926062072 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Marten.AsyncDaemon.Testing.Day>
    {
        private readonly Marten.AsyncDaemon.Testing.DayProjection _dayProjection;

        public DayProjectionLiveAggregation926062072(Marten.AsyncDaemon.Testing.DayProjection dayProjection)
        {
            _dayProjection = dayProjection;
        }



        public override Marten.AsyncDaemon.Testing.Day Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Marten.AsyncDaemon.Testing.Day snapshot)
        {
            if (!events.Any()) return null;
            Marten.AsyncDaemon.Testing.Day day = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Marten.AsyncDaemon.Testing.Day Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public Marten.AsyncDaemon.Testing.Day Apply(Marten.Events.IEvent @event, Marten.AsyncDaemon.Testing.Day aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.Movement> event_Movement15:
                    _dayProjection.Apply(aggregate, event_Movement15.Data);
                    break;
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.Stop> event_Stop16:
                    _dayProjection.Apply(aggregate, event_Stop16.Data);
                    break;
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.TripEnded> event_TripEnded14:
                    _dayProjection.Apply(aggregate, event_TripEnded14.Data);
                    break;
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.TripStarted> event_TripStarted13:
                    _dayProjection.Apply(aggregate, event_TripStarted13.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: DayProjectionLiveAggregation926062072
    
    
    // START: DayProjectionInlineHandler926062072
    public class DayProjectionInlineHandler926062072 : Marten.Events.Aggregation.CrossStreamAggregationRuntime<Marten.AsyncDaemon.Testing.Day, int>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Marten.AsyncDaemon.Testing.Day, int> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Marten.AsyncDaemon.Testing.Day, int> _storage;
        private readonly Marten.AsyncDaemon.Testing.DayProjection _dayProjection;

        public DayProjectionInlineHandler926062072(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Marten.AsyncDaemon.Testing.Day, int> slicer, Marten.Internal.Storage.IDocumentStorage<Marten.AsyncDaemon.Testing.Day, int> storage, Marten.AsyncDaemon.Testing.DayProjection dayProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _dayProjection = dayProjection;
        }



        public override async System.Threading.Tasks.ValueTask<Marten.AsyncDaemon.Testing.Day> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Marten.AsyncDaemon.Testing.Day, int> slice, Marten.Events.IEvent evt, Marten.AsyncDaemon.Testing.Day aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.Movement> event_Movement19:
                    aggregate ??= CreateDefault(evt);
                    _dayProjection.Apply(aggregate, event_Movement19.Data);
                    return aggregate;
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.Stop> event_Stop20:
                    aggregate ??= CreateDefault(evt);
                    _dayProjection.Apply(aggregate, event_Stop20.Data);
                    return aggregate;
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.TripEnded> event_TripEnded18:
                    aggregate ??= CreateDefault(evt);
                    _dayProjection.Apply(aggregate, event_TripEnded18.Data);
                    return aggregate;
                case Marten.Events.IEvent<Marten.AsyncDaemon.Testing.TestingSupport.TripStarted> event_TripStarted17:
                    aggregate ??= CreateDefault(evt);
                    _dayProjection.Apply(aggregate, event_TripStarted17.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public Marten.AsyncDaemon.Testing.Day Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }

    }

    // END: DayProjectionInlineHandler926062072
    
    
}

