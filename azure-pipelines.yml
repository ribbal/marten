trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
      - documentation/*
      - .github/*

pr:
  - master

resources:
  containers:
    - container: pg12_plv8
      image: ionx/postgres-plv8:12.8
      ports:
        - 5432:5432
      env:
        POSTGRES_HOST_AUTH_METHOD: trust
        NAMEDATALEN: 150
    - container: pg15
      image: postgres:15-alpine
      ports:
        - 5432:5432
      env:
        POSTGRES_HOST_AUTH_METHOD: trust
        NAMEDATALEN: 150
    - container: pgLatest
      image: postgres:latest
      ports:
        - 5432:5432
      env:
        POSTGRES_HOST_AUTH_METHOD: trust
        NAMEDATALEN: 150

variables:
  config: Release
  disable_test_parallelization: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  dotnet_version: '8.x'
  dotnet_framework_version: 'net8.0'
  node_version: 16.x
  pg_db: marten_testing
  marten_testing_database: "Host=localhost;Port=5432;Database=marten_testing;Username=postgres;Password=Password12!;Timeout=60;Cancellation Timeout=5000; Command Timeout=60"

jobs:
  - job: build_dotnet
    displayName: Build .NET 8
    # timeoutInMinutes: 20
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        pg12_plv8:
          postgresService: pg12_plv8
          serializer: Newtonsoft
          plv8: true
        pg12_SystemTextJson:
          postgresService: pg12_plv8
          serializer: SystemTextJson
          plv8: true
        pg15:
          postgresService: pg15
          serializer: SystemTextJson
          plv8: false
        pgLatest:
          postgresService: pgLatest
          serializer: Newtonsoft
          plv8: false
    services:
      postgres: $[ variables['postgresService'] ]
    steps:
      - task: UseDotNet@2
        displayName: Install .NET 8.0.x
        inputs:
          packageType: 'sdk'
          version: $(dotnet_version)
      - task: UseNode@1
        displayName: Install Node.js
        inputs:
          version: $(node_version)
      - script: |
          PG_CONTAINER_NAME=$(docker ps --filter expose=5432/tcp --format {{.Names}})
          docker exec $PG_CONTAINER_NAME psql -U postgres -c "create database $(pg_db);"
        displayName: Create db
      - script: |
          PG_CONTAINER_NAME=$(docker ps --filter expose=5432/tcp --format {{.Names}})
          docker exec $PG_CONTAINER_NAME bash -c "echo -e '\nfsync = off' >> /var/lib/postgresql/data/postgresql.conf"
          docker exec $PG_CONTAINER_NAME bash -c "echo -e '\nfull_page_writes = off' >> /var/lib/postgresql/data/postgresql.conf"
          docker exec $PG_CONTAINER_NAME bash -c "echo -e '\nsynchronous_commit = off' >> /var/lib/postgresql/data/postgresql.conf"
          docker container restart $PG_CONTAINER_NAME
        displayName: Optimize database for running tests faster
      - script: |
          PG_CONTAINER_NAME=$(docker ps --filter expose=5432/tcp --format {{.Names}})
          docker exec $PG_CONTAINER_NAME psql -U postgres -d $(pg_db) -c "create extension if not exists plv8;"
          docker exec $PG_CONTAINER_NAME psql -U postgres -c "DO 'plv8.elog(NOTICE, plv8.version);' LANGUAGE plv8;"
        displayName: Add plv8 extension
        condition: eq(variables['plv8'], 'true')
      - script: |
          dotnet run --project build/build.csproj -f $(dotnet_framework_version) -c Release -- ci
          dotnet run --project build/build.csproj -f $(dotnet_framework_version) -c Release -- test-extension-libs-without-plv8
        displayName: Build
        env:
          DEFAULT_SERIALIZER: $(serializer)
      - script: |
          dotnet run --project build/build.csproj -f $(dotnet_framework_version) -c Release -- test-plv8
        displayName: Build plv8
        env:
          DEFAULT_SERIALIZER: $(serializer)
        condition: eq(variables['plv8'], 'true')

